{"version":3,"file":"static/js/185.5db7cac3.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/Cart/CartItem.module.css?2ae8","components/Cart/CartItem.js","webpack://react-complete-guide/./src/components/Cart/Cart.module.css?054f","hooks/use-input.js","webpack://react-complete-guide/./src/components/UI/Button.module.css?ddcd","components/UI/Button.js","components/Cart/OrderForm.js","components/Cart/Cart.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cart-item\":\"CartItem_cart-item__sUgZa\",\"summary\":\"CartItem_summary__dKpyV\",\"price\":\"CartItem_price__XgKcy\",\"amount\":\"CartItem_amount__-dBqM\",\"actions\":\"CartItem_actions__KAVfW\"};","import classes from './CartItem.module.css';\n\nconst CartItem = (props) => {\n  const price = `$${props.price.toFixed(2)}`;\n\n  return (\n    <li className={classes['cart-item']}>\n      <div>\n        <h2>{props.name}</h2>\n        <div className={classes.summary}>\n          <span className={classes.price}>{price}</span>\n          <span className={classes.amount}>x {props.amount}</span>\n        </div>\n      </div>\n      <div className={classes.actions}>\n        <button onClick={props.onRemove}>âˆ’</button>\n        <button onClick={props.onAdd}>+</button>\n      </div>\n    </li>\n  );\n};\n\nexport default CartItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"cart-items\":\"Cart_cart-items__-poYs\",\"total\":\"Cart_total__xajDq\",\"actions\":\"Cart_actions__G+4oF\",\"btn--alt\":\"Cart_btn--alt__4zvnv\",\"btn\":\"Cart_btn__zxYhf\"};","import { useState } from \"react\";\r\n\r\nconst useInput = (validateFn) => {\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  const valueIsValid = validateFn(enteredValue);\r\n  const hasError = !valueIsValid && isTouched;\r\n  const inputBlurHandler = () => {\r\n    setIsTouched(true);\r\n  };\r\n  const inputChangeHandler = (e) => {\r\n    if (hasError) {\r\n      setIsTouched(true);\r\n    } else {\r\n      setIsTouched(false);\r\n    }\r\n    setEnteredValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setIsTouched(false);\r\n    setEnteredValue(\"\");\r\n  };\r\n  return {\r\n    enteredValue,\r\n    isTouched,\r\n    inputBlurHandler,\r\n    inputChangeHandler,\r\n    valueIsValid,\r\n    hasError,\r\n    reset,\r\n  };\r\n};\r\nexport default useInput;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__U0Fpg\"};","import React from \"react\";\n\nimport classes from \"./Button.module.css\";\n\nconst Button = (props) => {\n  return (\n    <button\n      type={props.type || \"button\"}\n      className={`${classes.button} `}\n      onClick={props.onClick}\n      disabled={props.disabled || \"\"}\n    >\n      {props.children}\n    </button>\n  );\n};\n\nexport default React.memo(Button);\n","import React, { useContext, useState } from 'react';\r\nimport useInput from '../../hooks/use-input';\r\nimport CartContext from '../../store/cart-context';\r\nimport Button from '../UI/Button';\r\nimport Input from '../UI/Input';\r\n\r\nconst OrderForm = (props) => {\r\n  const { items, totalAmount } = useContext(CartContext);\r\n  // Using context to send data to database.\r\n  // Used custom hook\r\n  const {\r\n    enteredValue: enteredName,\r\n    inputBlurHandler: nameBlurHandler,\r\n    valueIsValid: nameIsValid,\r\n    inputChangeHandler: nameChangeHandler,\r\n    hasError: nameHasError,\r\n    reset: resetName,\r\n  } = useInput((val) => val.trim().length !== 0);\r\n  const {\r\n    enteredValue: enteredAddress,\r\n    inputBlurHandler: addressBlurHandler,\r\n    valueIsValid: addressIsValid,\r\n    inputChangeHandler: addressChangeHandler,\r\n    hasError: addressHasError,\r\n    reset: resetAddress,\r\n  } = useInput((val) => val.trim().length !== 0);\r\n  const {\r\n    enteredValue: enteredContact,\r\n    inputBlurHandler: contactBlurHandler,\r\n    valueIsValid: contactIsValid,\r\n    inputChangeHandler: contactChangeHandler,\r\n    hasError: contactHasError,\r\n    reset: resetContact,\r\n  } = useInput((val) => val.trim().length === 10);\r\n  const {\r\n    enteredValue: enteredEmail,\r\n    inputBlurHandler: emailBlurHandler,\r\n    valueIsValid: emailIsValid,\r\n    inputChangeHandler: emailChangeHandler,\r\n    hasError: emailHasError,\r\n    reset: resetEmail,\r\n  } = useInput((val) => val.includes('@'));\r\n\r\n  const errorLoader = (field, msg) => {\r\n    return field && <p className=\"error-text\">{msg}</p>;\r\n  };\r\n\r\n  const formIsValid =\r\n    nameIsValid && emailIsValid && addressIsValid && contactIsValid;\r\n  const formSubmitHandler = async function (e) {\r\n    e.preventDefault();\r\n\r\n    const order = {\r\n      name: enteredName,\r\n      address: enteredAddress,\r\n      contact: +enteredContact,\r\n      email: enteredEmail,\r\n      order: { items, totalAmount },\r\n    };\r\n    props.onSubmit(order);\r\n    if (!formIsValid) return;\r\n    // Resetting all values\r\n    resetName();\r\n    resetEmail();\r\n    resetAddress();\r\n    resetContact();\r\n  };\r\n  return (\r\n    <form\r\n      onSubmit={formSubmitHandler}\r\n      style={{ height: '200px', overflow: 'auto' }}\r\n    >\r\n      {/* Used inline style coz having a whole css module file for this feature is not that worth it. */}\r\n      <Input\r\n        value={enteredName}\r\n        label=\"Name:\"\r\n        input={{\r\n          id: 'name',\r\n          type: 'text',\r\n          placeholder: 'Enter your name here',\r\n          onBlur: nameBlurHandler,\r\n          onChange: nameChangeHandler,\r\n        }}\r\n      />\r\n\r\n      {errorLoader(nameHasError, 'I am pleading you to enter your name')}\r\n\r\n      <Input\r\n        value={enteredEmail}\r\n        label=\"Email:\"\r\n        input={{\r\n          id: 'email',\r\n          type: 'email',\r\n          placeholder: 'Enter your email here',\r\n          onChange: emailChangeHandler,\r\n          onBlur: emailBlurHandler,\r\n        }}\r\n      />\r\n      {errorLoader(emailHasError, 'Stone age,huh?')}\r\n      <Input\r\n        value={enteredAddress}\r\n        label=\"Address:\"\r\n        input={{\r\n          id: 'address',\r\n          type: 'text',\r\n          placeholder: 'Enter your address here',\r\n          onChange: addressChangeHandler,\r\n          onBlur: addressBlurHandler,\r\n        }}\r\n      />\r\n      {errorLoader(addressHasError, 'Are you homeless?')}\r\n      <Input\r\n        label=\"Contact No.:\"\r\n        value={enteredContact}\r\n        input={{\r\n          id: 'contact',\r\n          type: 'tel',\r\n          placeholder: 'Enter your number here',\r\n          maxLength: '10',\r\n          onChange: contactChangeHandler,\r\n          onBlur: contactBlurHandler,\r\n        }}\r\n      />\r\n      {errorLoader(contactHasError, 'Nomad?')}\r\n      <Button onClick={props.onCancel}>Cancel</Button>\r\n      <Button type=\"submit\" disabled={!formIsValid}>\r\n        Confirm\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\nexport default OrderForm;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport React from 'react';\r\nimport Modal from '../UI/Modal';\r\nimport CartItem from './CartItem';\r\nimport classes from './Cart.module.css';\r\nimport CartContext from '../../store/cart-context';\r\nimport OrderForm from './OrderForm';\r\nimport { useNavigate } from 'react-router-dom';\r\nconst Cart = (props) => {\r\n  const cartCtx = useContext(CartContext);\r\n  const [sendingOrder, setSendingOrder] = useState(false);\r\n  const [orderSent, setOrderSent] = useState(false);\r\n  const totalAmount = `$${Math.abs(cartCtx.totalAmount).toFixed(2)}`;\r\n  const hasItems = cartCtx.items.length > 0;\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    !props.cartIsShown && navigate('/meals');\r\n    // If user reloads while in cart component,redirect him to meals\r\n  }, [props.cartIsShown]);\r\n  const cartItemRemoveHandler = (id) => {\r\n    cartCtx.removeItem(id);\r\n  };\r\n  const cartItemAddHandler = (item) => {\r\n    cartCtx.addItem({ ...item, amount: 1 });\r\n  };\r\n  const formSubmitHandler = async (order) => {\r\n    cartCtx.clearAllItem(); //To clear the items\r\n    setSendingOrder(true);\r\n    props.onCancel(); // To hide the form\r\n    const res = await fetch(\r\n      'https://react-second-f430c-default-rtdb.firebaseio.com/orders.json',\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify(order),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    const data = await res.json();\r\n    setOrderSent(true);\r\n    setSendingOrder(false);\r\n  };\r\n\r\n  const cartItems = (\r\n    <ul className={classes['cart-items']}>\r\n      {cartCtx.items.map((item) => (\r\n        <CartItem\r\n          key={item.id}\r\n          name={item.name}\r\n          amount={item.amount}\r\n          price={item.price}\r\n          onRemove={cartItemRemoveHandler.bind(null, item.id)}\r\n          onAdd={cartItemAddHandler.bind(null, item)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n  // Stored close Button in variable coz we use it in different conditions.\r\n  const closeBtn = (\r\n    <button className={classes['button--alt']} onClick={props.onClose}>\r\n      Close\r\n    </button>\r\n  );\r\n  const showOrderButton =\r\n    hasItems && props.cartIsShown && !props.formIsShown && !orderSent;\r\n  const showCloseButton =\r\n    props.cartIsShown && !props.formIsShown && !sendingOrder;\r\n  return (\r\n    <React.Fragment>\r\n      {props.cartIsShown && (\r\n        <Modal onClose={props.onClose}>\r\n          {sendingOrder && <p>Sending Data.....</p>}\r\n          {orderSent && <p>Order Sent</p>}\r\n          {!sendingOrder && !orderSent && (\r\n            <React.Fragment>\r\n              {cartItems}\r\n              <div className={classes.total}>\r\n                <span>Total Amount</span>\r\n                <span>{totalAmount}</span>\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n\r\n          <div className={classes.actions}>\r\n            {/* {props.showActionButton && !sendingOrder && !orderSent && closeBtn}\r\n          {orderSent && closeBtn}\r\n          {includeCart && showActionButton && closeBtn} */}\r\n            {showCloseButton && !orderSent && closeBtn}\r\n            {orderSent && closeBtn}\r\n            {showOrderButton && (\r\n              <button className={classes.button} onClick={props.onOrder}>\r\n                Order\r\n              </button>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {props.formIsShown && (\r\n              <OrderForm\r\n                onCancel={props.onClose}\r\n                onSubmit={formSubmitHandler}\r\n              />\r\n            )}\r\n          </div>\r\n        </Modal>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"names":["props","price","toFixed","className","classes","name","amount","onClick","onRemove","onAdd","validateFn","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","inputBlurHandler","inputChangeHandler","e","target","value","reset","Button","type","disabled","children","React","useContext","CartContext","items","totalAmount","useInput","val","trim","length","enteredName","nameBlurHandler","nameIsValid","nameChangeHandler","nameHasError","resetName","enteredAddress","addressBlurHandler","addressIsValid","addressChangeHandler","addressHasError","resetAddress","enteredContact","contactBlurHandler","contactIsValid","contactChangeHandler","contactHasError","resetContact","includes","enteredEmail","emailBlurHandler","emailIsValid","emailChangeHandler","emailHasError","resetEmail","errorLoader","field","msg","formIsValid","formSubmitHandler","preventDefault","order","address","contact","email","onSubmit","style","height","overflow","Input","label","input","id","placeholder","onBlur","onChange","maxLength","onCancel","cartCtx","sendingOrder","setSendingOrder","orderSent","setOrderSent","Math","abs","hasItems","navigate","useNavigate","useEffect","cartIsShown","cartItemRemoveHandler","removeItem","cartItemAddHandler","item","addItem","clearAllItem","fetch","method","body","JSON","stringify","headers","res","json","cartItems","map","bind","closeBtn","onClose","showOrderButton","formIsShown","showCloseButton","Modal","onOrder"],"sourceRoot":""}